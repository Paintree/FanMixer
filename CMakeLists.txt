CMAKE_MINIMUM_REQUIRED(VERSION 3.10)

SET(TARGET "FanControllerBoard")
SET(PROJECT_NAME "${TARGET} firmware")
SET(PROJECT_DESCRIPTION "Fan Controller firmware")

PROJECT(${PROJECT_NAME} LANGUAGES C ASM)

SET(CMAKE_SYSTEM_NAME "Generic")
SET(CMAKE_SYSTEM_PROCESSOR "arm")

# Configure project paths
SET(INCLUDE_PATH "${PROJECT_SOURCE_DIR}/include")
SET(SYSTEM_INCLUDE_PATH "${INCLUDE_PATH}/system")
SET(SRC_PATH "${PROJECT_SOURCE_DIR}/src")
SET(SYSTEM_SRC_PATH "${SRC_PATH}/system")
SET(BUILD_DIR "${PROJECT_SOURCE_DIR}/build")
SET(ELF_FILE "${BUILD_DIR}/${TARGET}.elf")
SET(BIN_FILE "${BUILD_DIR}/${TARGET}.bin")    
SET(HEX_FILE "${BUILD_DIR}/${TARGET}.hex")
SET(MAP_FILE "${BUILD_DIR}/${TARGET}.map")

# Set this port depending on your MCUs processor
SET(FREERTOS_PORT "GCC/ARM_CM3")

SET(CHIP "STM32F103x6")
SET(CPU "-mcpu=cortex-m3")
SET(FLOAT_ABI "-mfloat-abi=soft")
SET(STLINK_CONF "target/stm32f1x_stlink.cfg")
SET(MCU_OPTS "${CPU} -mthumb ${FLOAT_ABI}")

# Heap type used in FreeRTOS
SET(HEAP_TYPE "4")

# Cross compilation toolchain configuration
SET(COMPILER_PREFIX "arm-none-eabi-")
SET(CMAKE_C_COMPILER "${COMPILER_PREFIX}gcc")
SET(CMAKE_ASM_COMPILER "${COMPILER_PREFIX}gcc")
SET(CMAKE_CXX_COMPILER "${COMPILER_PREFIX}g++")
SET(CMAKE_OBJCOPY "${COMPILER_PREFIX}objcopy")
SET(CMAKE_OBJDUMP "${COMPILER_PREFIX}objdump")

# Compiler options with MCU parameters
ADD_COMPILE_OPTIONS(${CPU})
ADD_COMPILE_OPTIONS(${FLOAT_ABI})
ADD_COMPILE_OPTIONS(-mthumb)
ADD_COMPILE_OPTIONS(-fdata-sections)
ADD_COMPILE_OPTIONS(-ffunction-sections)
ADD_COMPILE_OPTIONS(-Wdouble-promotion)
ADD_COMPILE_OPTIONS(-fsingle-precision-constant)
ADD_COMPILE_OPTIONS(-Og)
ADD_COMPILE_OPTIONS(-nostdlib)
ADD_COMPILE_OPTIONS(-fno-exceptions)

# STM32HAL driver configuration 
SET(STM32_DIR "${PROJECT_SOURCE_DIR}/STM32CubeF1")
SET(CMSIS_DIR "${STM32_DIR}/Drivers/CMSIS")
SET(HAL_DRIVER_DIR "${STM32_DIR}/Drivers/STM32F1xx_HAL_Driver")
SET(STM32FX_DIR "${CMSIS_DIR}/Device/ST/STM32F1xx")
SET(STM32_INCLUDE "${HAL_DRIVER_DIR}/Inc")
SET(STM32_SRC "${HAL_DRIVER_DIR}/Src")
SET(FREERTOS_DIR "${STM32_DIR}/Middlewares/Third_Party/FreeRTOS")
SET(FREERTOS_SRC "${FREERTOS_DIR}/Source")
SET(FREERTOS_INCLUDE "${FREERTOS_SRC}/include")
SET(HAL_MCU_NAME "stm32f1xx")
SET(SYSTEM_SRC_FILE "${SYSTEM_SRC_PATH}/system_${HAL_MCU_NAME}.c")
SET(STARTUP_FILE "${STM32FX_DIR}/Source/Templates/gcc/startup_stm32f103x6.s")

# Preprocessor definitions to enable HAL driver
ADD_DEFINITIONS(-D${CHIP})
ADD_DEFINITIONS(-DUSE_HAL_DRIVER)

# Linker script configuration
SET(LD_DIR "${PROJECT_SOURCE_DIR}/ldscripts")

SET(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS "")
FILE(GLOB_RECURSE LINKER_SCRIPT "${LD_DIR}/STM32F103C6TX_FLASH.ld")
SET(CMAKE_EXE_LINKER_FLAGS "${MCU_OPTS}\
 --specs=nano.specs\
 -T${LINKER_SCRIPT}\
 -Wl,-Map=${MAP_FILE},--cref\
 -Wl,--gc-sections"
)

# Include paths
INCLUDE_DIRECTORIES("${HAL_DRIVER_DIR}/Inc")
INCLUDE_DIRECTORIES("${CMSIS_DIR}/Include")
INCLUDE_DIRECTORIES("${STM32FX_DIR}/Include")
INCLUDE_DIRECTORIES("${INCLUDE_PATH}")
INCLUDE_DIRECTORIES("${SYSTEM_INCLUDE_PATH}")
INCLUDE_DIRECTORIES("${STM32_INCLUDE}")
INCLUDE_DIRECTORIES("${FREERTOS_INCLUDE}")
INCLUDE_DIRECTORIES("${FREERTOS_SRC}/portable/${FREERTOS_PORT}")

# Enable HAL modules
ADD_DEFINITIONS(-DHAL_MODULE_ENABLED)
ADD_DEFINITIONS(-DHAL_CORTEX_MODULE_ENABLED)
ADD_DEFINITIONS(-DHAL_DMA_MODULE_ENABLED)
ADD_DEFINITIONS(-DHAL_GPIO_MODULE_ENABLED)
ADD_DEFINITIONS(-DHAL_RCC_MODULE_ENABLED)
ADD_DEFINITIONS(-DHAL_FLASH_MODULE_ENABLED)
ADD_DEFINITIONS(-DHAL_IWDG_MODULE_ENABLED)
ADD_DEFINITIONS(-DHAL_PWR_MODULE_ENABLED)
ADD_DEFINITIONS(-DHAL_TIM_MODULE_ENABLED)

# Source paths
FILE(GLOB HAL_SRCS "${STM32_SRC}/*.c")
FILE(GLOB_RECURSE USER_SRCS "${SRC_PATH}/*.c" "${SRC_PATH}/*.cpp")
LIST(FILTER HAL_SRCS EXCLUDE REGEX ".*_template.c")
SET(SOURCES
  "${STARTUP_FILE}"
  "${FREERTOS_SRC}/tasks.c"
  "${FREERTOS_SRC}/queue.c"
  "${FREERTOS_SRC}/list.c"
  "${FREERTOS_SRC}/portable/${FREERTOS_PORT}/port.c"
  "${FREERTOS_SRC}/portable/MemMang/heap_${HEAP_TYPE}.c"
  "${USER_SRCS}"
)

# Configure targets
ADD_LIBRARY(hal STATIC "${HAL_SRCS}")
ADD_EXECUTABLE(${TARGET} "${SYSTEM_SRC_FILE}" "${SOURCES}" "${LINKER_SCRIPT}")
TARGET_LINK_LIBRARIES(${TARGET} c m nosys hal)
TARGET_COMPILE_OPTIONS(${TARGET} PRIVATE -Wall -Wextra -Wpedantic)

# Create binary and hex files from target
ADD_CUSTOM_COMMAND(TARGET "${TARGET}" POST_BUILD
  COMMAND ${CMAKE_OBJCOPY} -O binary -S ${TARGET} ${BIN_FILE}
  COMMAND ${CMAKE_OBJCOPY} -O ihex ${TARGET} ${HEX_FILE}
  COMMAND ${CMAKE_COMMAND} -E copy ${TARGET} "${BUILD_DIR}/${ELF_FILE}"
)

# Copy FreeRTOS template config
ADD_CUSTOM_COMMAND(
  OUTPUT "${SYSTEM_INCLUDE_PATH}/FreeRTOSConfig.h"
  COMMAND mkdir -p "${SYSTEM_INCLUDE_PATH}"
  COMMAND cp "${FREERTOS_INCLUDE}/FreeRTOSConfig_template.h"
             "${SYSTEM_INCLUDE_PATH}/FreeRTOSConfig.h"
)

ADD_CUSTOM_TARGET(FreeRTOSConfig
  DEPENDS "${SYSTEM_INCLUDE_PATH}/FreeRTOSConfig.h"
)

# Copy HAL config from library template and prepare it
ADD_CUSTOM_TARGET(HALConfig
  COMMAND mkdir -p "${SYSTEM_INCLUDE_PATH}"
  COMMAND cp "${STM32_INCLUDE}/${HAL_MCU_NAME}_hal_conf_template.h"
             "${SYSTEM_INCLUDE_PATH}/${HAL_MCU_NAME}_hal_conf.h"
  COMMAND sed -i '/^.define.*_MODULE_ENABLED/d'
          "${SYSTEM_INCLUDE_PATH}/${HAL_MCU_NAME}_hal_conf.h"
)

# Copy system stm32 source file from HAL
ADD_CUSTOM_COMMAND(
  OUTPUT "${SYSTEM_SRC_FILE}"
  COMMAND mkdir -p "${SYSTEM_SRC_PATH}"
  COMMAND cp "${STM32FX_DIR}/Source/Templates/system_${HAL_MCU_NAME}.c"
             "${SYSTEM_SRC_FILE}"
)

# Make main target depending on pre bild configuration
ADD_DEPENDENCIES(${TARGET} FreeRTOSConfig)
ADD_DEPENDENCIES(hal HALConfig)